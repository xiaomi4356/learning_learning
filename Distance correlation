import torch


def DistanceCorrelation(tensor1, tensor2):
    # ref: https://en.wikipedia.org/wiki/Distance_correlation
    #这里输入的tensor1和tensor2分别是两个N*K的矩阵，N是样本数，K是每个样本的维度，分别判断每个样本每K个维度之间的独立性
    total_cor=0
    for i in range(tensor1.size(0)):
        tensor_1 = tensor1[i]
        tensor_2 = tensor2[i]
        channel = tensor_1.shape[0]
        zeros = torch.zeros(channel, channel).to(tensor_1.device)
        zero = torch.zeros(1).to(tensor_1.device)
        tensor_1, tensor_2 = tensor_1.unsqueeze(-1), tensor_2.unsqueeze(-1)
        """cul distance matrix"""
        a_, b_ = torch.matmul(tensor_1, tensor_1.t()) * 2, \
                 torch.matmul(tensor_2, tensor_2.t()) * 2  # [channel, channel]
        tensor_1_square, tensor_2_square = tensor_1 ** 2, tensor_2 ** 2
        a, b = torch.sqrt(torch.max(tensor_1_square - a_ + tensor_1_square.t(), zeros) + 1e-8), \
               torch.sqrt(torch.max(tensor_2_square - b_ + tensor_2_square.t(), zeros) + 1e-8)  # [channel, channel]
        """cul distance correlation"""
        A = a - a.mean(dim=0, keepdim=True) - a.mean(dim=1, keepdim=True) + a.mean()
        B = b - b.mean(dim=0, keepdim=True) - b.mean(dim=1, keepdim=True) + b.mean()
        dcov_AB = torch.sqrt(torch.max((A * B).sum() / channel ** 2, zero) + 1e-8)
        dcov_AA = torch.sqrt(torch.max((A * A).sum() / channel ** 2, zero) + 1e-8)
        dcov_BB = torch.sqrt(torch.max((B * B).sum() / channel ** 2, zero) + 1e-8)
        cor = dcov_AB / torch.sqrt(dcov_AA * dcov_BB + 1e-8)
        total_cor = total_cor+cor
    mean_cor = total_cor / tensor1.size(0)
    return mean_cor
